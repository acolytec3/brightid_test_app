{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","React","useState","verified","setVerified","privateKey","setPrivateKey","testingKey","setTestingKey","context","setContext","contextId","setContextId","deeplink","setDeeplink","sponsorships","setSponsorships","res","setRes","verify","a","verifyContextId","JSON","stringify","console","log","trySponsor","sponsor","testBlocks","op","putTestingBlock","deleteTestBlocks","removeTestingBlock","useEffect","generateDeeplink","availableSponsorships","then","align","w","px","direction","borderWidth","borderColor","p","minWidth","size","my","placeholder","value","onChange","evt","target","onClick","v4","isLoaded","color","overflow","href","mx","type","mb","isDisabled","hasOwnProperty","unique","toString","spacing","py","justify","fontSize","pl","minHeight","isReadOnly","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c449892e.chunk.js","sourcesContent":["import { Box, Button, ChakraProvider, Code, Divider, Flex, Heading, HStack, Input, Link, Skeleton, Text, Textarea, VStack } from '@chakra-ui/react';\nimport { generateDeeplink, putTestingBlock, removeTestingBlock, sponsor, verifyContextId, availableSponsorships } from 'brightid_sdk';\nimport QRCode from 'qrcode.react';\nimport React from 'react';\nimport { v4 } from 'uuid';\n\nfunction App() {\n  const [verified, setVerified] = React.useState<any>()\n  const [privateKey, setPrivateKey] = React.useState<string>()\n  const [testingKey, setTestingKey] = React.useState<string>()\n  const [context, setContext] = React.useState<string>()\n  const [contextId, setContextId] = React.useState<string>()\n  const [deeplink, setDeeplink] = React.useState<string>()\n  const [sponsorships, setSponsorships] = React.useState<number>(0)\n  const [res, setRes] = React.useState<string>()\n\n  const generateContextId = () => {\n    setContextId(v4())\n  }\n\n  const verify = async () => {\n    let res = await verifyContextId(context!, contextId!)\n    setVerified(res)\n    setRes(JSON.stringify(res, null, 2))\n    console.log(res)\n  }\n\n  const trySponsor = async () => {\n    let res = await sponsor(privateKey!, context!, contextId!)\n    setRes(JSON.stringify(res, null, 2))\n    console.log(res)\n  }\n\n  const testBlocks = async (op: string) => {\n    let res = await putTestingBlock(op, testingKey!, context!, contextId!)\n    setRes(JSON.stringify(res, null, 2))\n    console.log(res)\n\n  }\n\n  const deleteTestBlocks = async (op: string) => {\n    let res = await removeTestingBlock(op, testingKey!, context!, contextId!)\n    setRes(JSON.stringify(res, null, 2))\n    console.log(res)\n  }\n\n  React.useEffect(() => {\n    if (context && contextId) {\n      setDeeplink(generateDeeplink(context, contextId))\n    }\n    else setDeeplink('')\n  }, [context, contextId])\n\n  React.useEffect(() => {\n    if (context) {\n      availableSponsorships(context).then((res: number | any) => {\n        if (typeof res === 'number')\n          setSponsorships(res)\n      })\n    }\n  }, [context])\n  return (\n    <ChakraProvider>\n      <VStack align=\"center\" w=\"100%\" px=\"10%\">\n        <Heading>BrightID Test App</Heading>\n        <Flex direction=\"row\"><Box borderWidth=\"1px\" borderColor=\"grey.300\" p=\"5px\" minWidth=\"200px\">\n          <Heading size=\"sm\">Application Context</Heading>\n          <HStack><VStack>\n            <Input my=\"5px\" placeholder=\"Context\" value={context} onChange={(evt) => setContext(evt.target.value)} />\n            <Input placeholder=\"ContextId\" value={contextId} onChange={(evt) => setContextId(evt.target.value)} />\n            <Button onClick={generateContextId}>Generate ContextId</Button>\n          </VStack>\n            <VStack>\n              <Heading size=\"xs\">Linking QR Code</Heading>\n              <Skeleton isLoaded={deeplink !== ''}>\n                <QRCode value={deeplink ? deeplink : ''} />\n              </Skeleton>\n              <Skeleton isLoaded={deeplink !== ''}>\n                <Link color=\"blue.700\" w=\"128px\" overflow=\"ellipsis\" href={deeplink}>Clickable link</Link>\n              </Skeleton>\n            </VStack>\n          </HStack>\n        </Box>\n          <Box mx=\"10px\" borderWidth=\"1px\" borderColor=\"grey.300\" p=\"5px\">\n            <Heading size=\"sm\">Application Keys</Heading>\n            <Input my=\"5px\" type=\"password\" placeholder=\"Sponsor Private Key\" value={privateKey} onChange={(evt) => setPrivateKey(evt.target.value)} />\n            <Input type=\"password\" placeholder=\"Testing Key\" value={testingKey} onChange={(evt) => setTestingKey(evt.target.value)} />\n          </Box></Flex>\n\n        <Flex direction=\"row\">\n          <VStack>\n          <Box borderWidth=\"1px\" borderColor=\"grey.300\" p=\"5px\" minWidth=\"200px\" >\n            <Heading size=\"sm\">ContextID Status</Heading>\n            <Flex direction=\"row\">\n              <VStack align=\"start\">\n                <HStack mb=\"5px\">\n                  <Button w=\"200px\" onClick={verify} isDisabled={!context || !contextId}>Check status</Button>\n                  <Text w=\"250px\">Status verified: {verified && verified.hasOwnProperty('unique') ? verified.unique.toString() : 'unknown '}</Text>\n                </HStack>\n                <HStack>\n                  <Button w=\"200px\" onClick={trySponsor} isDisabled={!privateKey || !context || !contextId}>Sponsor</Button>\n                  <Text w=\"250px\">Available sponsorships: {sponsorships}</Text>\n                </HStack>\n              </VStack>\n            </Flex>\n          </Box>\n          <Box borderWidth=\"1px\" borderColor=\"grey.300\" p=\"5px\" minWidth=\"200px\">\n            <Heading size=\"sm\">ContextID Status Testing Tools</Heading>\n            <Divider />\n            <Text align=\"center\">Remove contextID status in current context</Text>\n            <HStack spacing={4} py=\"5px\" justify=\"center\">\n              <Button w=\"200px\" onClick={() => testBlocks('verification')} isDisabled={!testingKey || !context || !contextId}>Unverify</Button>\n              <Button w=\"200px\" onClick={() => testBlocks('sponsorship')} isDisabled={!testingKey || !context || !contextId}>Unsponsor</Button>\n              <Button w=\"200px\" onClick={() => testBlocks('link')} isDisabled={!testingKey || !context || !contextId}>Unlink</Button>\n            </HStack>\n            <Text color=\"grey\" fontSize={12}>Note: Updates to a contextId's status should reflect immediately in node responses</Text>\n            <Divider />\n            <Text align=\"center\">Reset contextID status in current context</Text>\n            <HStack spacing={4} py=\"5px\" justify=\"center\">\n              <Button w=\"200px\" onClick={() => deleteTestBlocks('verification')} isDisabled={!testingKey || !context || !contextId}>Delete Unverify</Button>\n              <Button w=\"200px\" onClick={() => deleteTestBlocks('sponsorship')} isDisabled={!testingKey || !context || !contextId}>Delete Unsponsor</Button>\n              <Button w=\"200px\" onClick={() => deleteTestBlocks('link')} isDisabled={!testingKey || !context || !contextId}>Delete Unlink</Button>\n            </HStack>\n            <Text color=\"grey\" fontSize={12}>Note: Removing contextId status updates takes 1-2 minutes to reflect in node responses</Text>\n          </Box>\n          </VStack>\n          <Box pl=\"5px\" align=\"center\" >\n            <Heading size=\"sm\">Node Response</Heading>\n            <Code>\n              <Textarea minHeight=\"300px\" minWidth=\"300px\" fontSize={12} value={res} isReadOnly={true} />\n            </Code>\n          </Box>\n        </Flex>\n      </VStack>\n    </ChakraProvider>\n  )\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}